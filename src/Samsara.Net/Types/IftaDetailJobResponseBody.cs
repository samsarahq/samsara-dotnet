using System.Text.Json;
using System.Text.Json.Serialization;
using Samsara.Net.Core;

namespace Samsara.Net;

/// <summary>
/// A job representing the async generation of IFTA mileage segments. The job should be polled until the state is terminal.
/// </summary>
public record IftaDetailJobResponseBody
{
    [JsonPropertyName("args")]
    public required IftaDetailJobArgsResponseBody Args { get; set; }

    /// <summary>
    /// The time this job completed successfully.
    /// </summary>
    [JsonPropertyName("completedAtTime")]
    public string? CompletedAtTime { get; set; }

    /// <summary>
    /// A message containing additional details about the job, if available.
    /// </summary>
    [JsonPropertyName("details")]
    public string? Details { get; set; }

    /// <summary>
    /// The time this job failed.
    /// </summary>
    [JsonPropertyName("failedAtTime")]
    public string? FailedAtTime { get; set; }

    /// <summary>
    /// A list of files generated by this job. This field will be omitted when the job status is "Failed" or no data exists with the provided job arguments. Read about the file structure [here](https://developers.samsara.com/docs/ifta-detail-csv).
    /// </summary>
    [JsonPropertyName("files")]
    public IEnumerable<IftaDetailJobOutputResponseBody>? Files { get; set; }

    /// <summary>
    /// The ID used to retrieve this job.
    /// </summary>
    [JsonPropertyName("jobId")]
    public required string JobId { get; set; }

    /// <summary>
    /// The status of this job. `jobStatus` can be one of Requested, Processing, Completed, or Failed.  Valid values: `Requested`, `Processing`, `Completed`, `Failed`
    /// </summary>
    [JsonPropertyName("jobStatus")]
    public required IftaDetailJobResponseBodyJobStatus JobStatus { get; set; }

    /// <summary>
    /// The time this job was requested for creation.
    /// </summary>
    [JsonPropertyName("requestedAtTime")]
    public required string RequestedAtTime { get; set; }

    /// <summary>
    /// The time this job started processing.
    /// </summary>
    [JsonPropertyName("startedAtTime")]
    public string? StartedAtTime { get; set; }

    /// <summary>
    /// Additional properties received from the response, if any.
    /// </summary>
    /// <remarks>
    /// [EXPERIMENTAL] This API is experimental and may change in future releases.
    /// </remarks>
    [JsonExtensionData]
    public IDictionary<string, JsonElement> AdditionalProperties { get; internal set; } =
        new Dictionary<string, JsonElement>();

    /// <inheritdoc />
    public override string ToString()
    {
        return JsonUtils.Serialize(this);
    }
}
